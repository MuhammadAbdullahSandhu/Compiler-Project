in future grammar will keep expanding 

Version 1 for testing only 
version 1:
Expression → Term Expression'
Expression' → + Term Expression' | - Term Expression' | Em
Term → Factor Term'
Term' → * Factor Term' | / Factor Term' | Em
Factor → NUMBER | ( Expression )

version 2:
program       :- function
function      :- return_type function_name() { block }
block         :- { statement* }
statement     :- variable_declaration | return_statement | assignment_statement
variable_declaration :- type identifier ; | type identifier = expression ;
return_statement    :- return expression ;
assignment_statement :- identifier = expression ;
expression    :- NUMBER | IDENTIFIER


version 3:
program              :- program_declaration* function*
program_declaration  :- variable_declaration
function             :- return_type function_name() { block }
block                :- { statement* }
statement            :- variable_declaration | return_statement | assignment_statement
variable_declaration :- type identifier ; | type identifier = expression ;
return_statement     :- return expression ;
assignment_statement :- identifier = expression ;
expression           :- NUMBER | IDENTIFIER


version 4:
program              :- (declaration | function)*
declaration          :- variable_declaration
function             :- return_type identifier "(" ")" "{" block "}"
block                :- "{" (statement | variable_declaration)* "}"
statement            :- return_statement | assignment_statement
variable_declaration :- type identifier ";" | type identifier "=" expression ";"
return_statement     :- "return" expression ";"
assignment_statement :- identifier "=" expression ";"
expression           :- NUMBER | IDENTIFIER
return_type          :- "int" | "void" 
type                 :- "int" 


version 5:
program              :- (function | declaration)*
function             :- return_type identifier "(" ")" block
declaration          :- variable_declaration
block                :- "{" (statement | variable_declaration)* "}"
statement            :- return_statement 
                     | assignment_statement 
                     | expression ";"
variable_declaration :- type identifier ";"
                     | type identifier "=" expression ";"
return_statement     :- "return" expression ";"
assignment_statement :- identifier "=" expression ";"
expression           :- expression ( "+" | "-" | "*" | "/" ) expression
                     | "(" expression ")"
                     | NUMBER
                     | IDENTIFIER
return_type          :- "int" | "void"
type                 :- "int" 



version 6:
program              :- (function | declaration)*
function             :- return_type identifier "(" ")" block
declaration          :- variable_declaration
block                :- "{" (statement | variable_declaration)* "}"
statement            :- return_statement 
                     | assignment_statement 
                     | if_statement
                     | expression ";"
variable_declaration :- type identifier ";"
                     | type identifier "=" expression ";"
return_statement     :- "return" expression ";"
assignment_statement :- identifier "=" expression ";"
if_statement         :- "if" "(" expression ")" block ( "else" block )?
expression           :- expression ( "+" | "-" | "*" | "/" ) expression
                     | "(" expression ")"
                     | NUMBER
                     | IDENTIFIER
return_type          :- "int" | "void"

type                 :- "int"




version 7:
program              :- (function | declaration)*
function             :- return_type identifier "(" ")" block
declaration          :- variable_declaration
block                :- "{" (statement | variable_declaration)* "}"
statement            :- return_statement 
                     | assignment_statement 
                     | if_statement
                     | for_statement
                     | expression ";"
variable_declaration :- type identifier ";"
                     | type identifier "=" expression ";"
return_statement     :- "return" expression ";"
assignment_statement :- identifier "=" expression ";"
if_statement         :- "if" "(" expression ")" block ( "else" block )?
for_statement        :- "for" "(" (variable_declaration | assignment_statement)? ";" expression? ";" expression? ")" block
expression           :- expression ( "+" | "-" | "*" | "/" ) expression
                     | "(" expression ")"
                     | NUMBER
                     | IDENTIFIER
return_type          :- "int" | "void"
type                 :- "int"






version 8:
program              :- (function | declaration)*

function             :- return_type identifier "(" ")" block
declaration          :- variable_declaration
block                :- "{" (statement | variable_declaration)* "}"

statement            :- return_statement 
                     | assignment_statement 
                     | if_statement
                     | for_statement
                     | expression ";"

variable_declaration :- type identifier ";"
                     | type identifier "=" expression ";"

return_statement     :- "return" expression ";"
assignment_statement :- identifier "=" expression ";"
if_statement         :- "if" "(" expression ")" block ( "else" block )?
for_statement        :- "for" "(" (variable_declaration | assignment_statement)? ";" expression? ";" expression? ")" block

# Expression Grammar with Precedence Levels
expression           :- additive_expression

additive_expression  :- multiplicative_expression ( ("+" | "-") multiplicative_expression )*

multiplicative_expression :- primary_expression ( ("*" | "/") primary_expression )*

primary_expression   :- "(" expression ")" 
                     | NUMBER
                     | IDENTIFIER

return_type          :- "int" | "void"
type                 :- "int"
